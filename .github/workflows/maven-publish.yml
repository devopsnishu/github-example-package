# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml
       
    - name: Analyze with SonarCloud
      run:  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=devopsnishu_github-example-package
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Retrieve SonarCloud details
      id: sonarcloud-details
      run: |
         
          project_key=$(grep 'sonar.projectKey' sonar-project.properties | cut -d'=' -f2)
          metrics_response=$(curl -s "https://sonarcloud.io/api/measures/component?component=${project_key}&metricKeys=code_smells,coverage")
          response=$(curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${project_key}")
          # Extract relevant details from the response
          quality_gate_status=$(echo "${response}" | jq -r '.projectStatus.status')
          quality_gate_conditions=$(echo "${response}" | jq -r '.projectStatus.conditions[] | select(.metricKey == "alert_status")')
          code_smells=$(echo "${metrics_response}" | jq -r '.component.measures[] | select(.metric == "code_smells") | .value')
          coverage=$(echo "${metrics_response}" | jq -r '.component.measures[] | select(.metric == "coverage") | .value')

          # Extract threshold value from the conditions
          threshold=$(echo "${quality_gate_conditions}" | jq -r '.errorThreshold')
          threshold_code_smells=100
          threshold_coverage=80
          # Output the details for further usage
          echo "::set-output name=quality_gate_status::${quality_gate_status}"
          echo "::set-output name=threshold::${threshold}"
    - name: Compare SonarCloud result with threshold
      run: |
          # Threshold value for the quality gate
          threshold=${{ steps.sonarcloud-details.outputs.threshold }}
          
          # Quality gate status
          quality_gate_status=${{ steps.sonarcloud-details.outputs.quality_gate_status }}
          if [[ "${quality_gate_status}" == "ERROR" ]]; then
            echo "Quality gate failed. SonarCloud analysis did not meet the threshold."
            exit 1
          elif [[ "${quality_gate_status}" == "OK" ]]; then
            echo "Quality gate passed. SonarCloud analysis meets the threshold."
          else
            echo "Unable to determine the quality gate status."
            exit 1
          
          if (( $(echo "${code_smells} > ${threshold_code_smells}" | bc -l) )); then
            code_smells_status="Above threshold"
          else
            code_smells_status="Below threshold"
          fi

          if (( $(echo "${coverage} < ${threshold_coverage}" | bc -l) )); then
            coverage_status="Below threshold"
          else
            coverage_status="Above threshold"
          fi
     

          # Create the output JSON object
          output_json=$(jq -n \
            --arg quality_gate_status "${quality_gate_status}" \
            --arg code_smells "${code_smells}" \
            --arg code_smells_status "${code_smells_status}" \
            --arg coverage "${coverage}" \
            --arg coverage_status "${coverage_status}" \
            '{"quality_gate_status": $quality_gate_status, "code_smells": $code_smells, "code_smells_status": $code_smells_status, "coverage": $coverage, "coverage_status": $coverage_status}')

          # Save the output JSON to a file
          echo "${output_json}" > sonarcloud_output.json

          
       
    - name: Test with Maven
      run: mvn -B test --file pom.xml
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Java-jar
        path: |
         src/target/*.jar
         src/target/*.zip

    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/java
          
    -
       name: Build and push
       uses: docker/build-push-action@v2
       with:
        context: .
        dockerfile: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
        
