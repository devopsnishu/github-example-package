# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package
on: 
 workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml
       
    - name: Analyze with SonarCloud
      run:  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=devopsnishu_github-example-package
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Install jq
      run: sudo apt-get install -y jq
    -  name: API with curl
       shell: bash
       env: 
         COVERAGE_THRESHOLD: 20
         CODE_SMELLS_THRESHOLD: 200
         VULNERABILITIES_THRESHOLD: 6
        
       run: | 
            
            curl --location --request GET 'https://sonarcloud.io/api/measures/component?metricKeys=code_smells,coverage,duplicated_lines_density,vulnerabilities,security_hotspots,critical_violations,bugs&component=devopsnishu_github-example-package' --header 'Authorization: Bearer ${{ secrets.SONAR_TOKEN }}' > ./Response.json
            while read jsonData ;
            do
            metric=$(jq -r '.metric' <<< $jsonData)
            value=$(jq -r '.value'<<< $jsonData)
            echo "$metric"
            echo "$value"
            #echo "${metric%.*}"

            if [ "$metric" == "coverage" ] ;
              then
                if [ "${value%.*}" -lt ${{env.COVERAGE-THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "code_smells" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CODE_SMELLS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "vulnerabilities" ] ;
              then
                if [ "${value%.*}" -gt ${{env.VULNERABILITIES_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "critical_violations" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CRITICAL_VIOLATIONS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            fi
            done <<< $(jq -c '.component.measures[]' $PWD/Response.json)
            cat $PWD/Response.json
          
        
 
            
             
       
     
    - name: Test with Maven
      run: mvn -B test --file pom.xml
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Java-jar
        path: |
         src

    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/java
          
    -
       name: Build and push
       uses: docker/build-push-action@v2
       with:
        context: .
        dockerfile: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
    - name: Repository Dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
          token: ${{ secrets.GENERAL_TOKEN }}
          repository: devopsnishu/javademo
          event-type: my-event     
