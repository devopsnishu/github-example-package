# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package
on: 
 workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml
       
    - name: Analyze with SonarCloud
      run:  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=devopsnishu_github-example-package
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Install jq
      run: sudo apt-get install -y jq
    -  name: API with curl
       env: 
         Coverage_value: 10
         CODE_SMELLS_value: 50
         Value: "https://sonarcloud.io/api/project_badges/measure?project=devopsnishu_github-example-package&metric=coverage" 
       run: | 
            
            curl -u ${{ secrets.SONAR_TOKEN }} -OL "$Value" >> github.json
            cat $PWD/github.json
            while read jsonDate ;
            do 
             metric=$(jq -r '.metric' <<< $jsonData)
             value=$(jq -r '.value' <<< $jsonData)
             echo "$metric"
             
               if [ "${value%.*}" -lt ${{env.Coverage_value}} ]
                echo "Expected $(metric%.*) - {{env.Coverage_value}}" 
                echo "Actual $(metric%.*) - ${value%.*} "
                echo "Coverage is fail"
                exit 1
               else
                echo "Expected $(metric%.*) - {{env.Coverage_value}}" 
                echo "Actual $(metric%.*) - ${value%.*} "
                echo "Coverage is fail"
              fi
             
                
                
                
                
 
               
             
             
             
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Retrieve SonarCloud details
      id: sonarcloud-details
      run: |
         
          project_key=$(grep 'sonar.projectKey' sonar-project.properties | cut -d'=' -f2)
          metrics_response=$(curl -s "https://sonarcloud.io/api/measures/component?component=${project_key}&metricKeys=code_smells,coverage")        

          # Extract threshold value from the conditions
          code_smells=$(echo "${metrics_response}" | jq -r '.component.measures[] | select(.metric == "code_smells") | .value')
          coverage=$(echo "${metrics_response}" | jq -r '.component.measures[] | select(.metric == "coverage") | .value')
          
          # Output the details for further usage
          echo "::set-output name=coverage::${coverage}"
          echo "::set-output name=code_smells::${code_smells}"
    - name: Compare SonarCloud result with threshold
      run: |
          
          threshold_code_smells=100
          threshold_coverage=80
 
           
             if (( $(echo "${code_smells} > ${threshold_code_smells}" | bc -l) )); then
              echo "code_smells_status=Pass,Actual is ${code_smells},Expected is ${threshold_code_smells}"
             else
              echo "code_smells_status=Fail ,Actual is ${code_smells},Expected is ${threshold_code_smells}"
            fi

            if (( $(echo "${coverage} < ${threshold_coverage}" | bc -l) )); then
             echo "coverage_status=Fail, Actual is ${coverage},Expected is ${threshold_coverage}"
           else
            echo "coverage_status=Pass,  Actual is ${coverage},Expected is ${threshold_coverage}"
           fi
     

         
          
       
    - name: Test with Maven
      run: mvn -B test --file pom.xml
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Java-jar
        path: |
         src/target/*.jar
         src/target/*.zip

    -
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/java
          
    -
       name: Build and push
       uses: docker/build-push-action@v2
       with:
        context: .
        dockerfile: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
        
